import * as Neutral from '/NP_Construct/NP_Javascript/NP_Archive/NP_Neutral.js'

export function RelFreq(interger, array) {
    const result = array.flat().filter((x) => x == interger).length / array.flat().length;
    return result;
}

export function RelFreqCount(interger, array) {
    const result = array.flat().filter((x) => x === interger).length;
    return result;
}

export function Number_Percent(number) {
    const result = Intl.NumberFormat('en-US', { style: 'percent', minimumFractionDigits: 2 }).format(number);
    return result;
}

export function Percent_Number(number) {
    const result = Number(Intl.NumberFormat('en-US', { style: 'decimal' }).format(number.slice(0, number.length - 1)));
    return result;
}

export function Decimal_Round(number, places){
   return Number(Intl.NumberFormat('en-US', {style: 'decimal', maximumFractionDigits: Number(places)}).format(number))
}

export function Float(n, pt, keep = false){
    const new_n = Number(n.toFixed(pt));
    return keep === true ? new_n.toPrecision(pt) : new_n;
}

export function Compare(a, b){
    return Math.abs(a - b)
}

export function Compare2(a, b){
    return Math.abs(Math.abs(a) - Math.abs(b))
}
 
export function Same_Sign(a, b){
    return (Math.sign(a) === Math.sign(b))
}

export function Get_Outcomes(start, end, text_true){
    const outcomes = [];
    for(let i = start; i <= end; i++){outcomes.push((text_true === true ? (i < 10 ? `0${i}` : JSON.stringify(i)) : JSON.stringify(i)))}
    return outcomes;
}

export function Get_FA(array, array2, fa_type, fa_limit) {
    const result = array.map((x, index) => x.map((y) => {const intial = array2.slice(index + 1, index + fa_limit + 1).findIndex((z) => z.includes(y)) + 1; return fa_type == 1 ? intial: fa_type == 2 ? array2.slice(intial + index + 1, intial + index + 21).findIndex((z) => z.includes(y)) + 1 : 'INVALID'}));
    return result;
}

export function Get_Current_FA(num, array, fa_type, start, n){
    const result = array.slice(start, start + n).findIndex((x) => x.includes(num)) + 1;
    return fa_type == 2 ? array.slice(start + result, start + result - 1 + n).findIndex((x) => x.includes(num)) + 1: fa_type == 1 ? result: "INVALID";
}

export function Get_FA_Between(z, z2,  num, array2, st, end){
    const result = array2.slice(st, end).findIndex((y) => Is_Between(y, num - z, num + z2));
    return result === -1 ? array2.slice(st, end).length : result + 1;
}

export function Is_Between(x, y, y2){
   return (x > y && x < y2)
}


export function FA_Statistics(array, array2, fa_type, fa_limit){
    let p_fa = []; for(let i = 0; i <= fa_limit; i++){p_fa.push(i)};
    const outcomes = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
    const subject_true = Get_FA(array2, array2, fa_type, fa_limit).slice(0, self.length - (fa_limit + 1)).map((x) => x.filter((y) => y !== 0))
    const subject_false = Get_FA(array, array2, fa_type, fa_limit).slice(0, self.length - (fa_limit + 1))
    const p_1 = [p_fa, p_fa].map((x, i) =>  x.map((y) => RelFreq(y, [subject_true, subject_false][i])))
    const p_1_2a = p_1[0].map((y, index) => y / (y + p_1[1][index]))
    const p_1_2ab = p_1[0].map((y, index) => (y + p_1[1][index]) / 2)
    const cur_FA = outcomes.map((x) => Get_Current_FA(x, array2, 1, 1, 30))
    const cur_FA_p = cur_FA.map((x) => Number(p_1_2a[x]))
    const cur_FA_pb = cur_FA.map((x) => Number(p_1_2ab[x]))

    return [subject_true, subject_false, p_1, p_1_2a, p_1_2ab, cur_FA_p, cur_FA_pb, cur_FA_p.map((x, i) => x * cur_FA_pb[i])]
}
 
export function Stat_Tool(array){
    const n = array.length; const average = (ar) => ar.reduce((a, b) => a + b) / ar.length;
    const variance = array.map((x) => Math.pow(x - average(array), 2)).reduce((a, b) => a + b) / (n - 1);
    const stand_dev = Math.sqrt(variance)
    return [average(array), variance, stand_dev];   
}

export function R_Duplicate(drawing){
    const result = drawing.filter((x, index) => drawing.indexOf(x) === index)
    return result;
}

export function Get_Duplicate(drawing){
const result = drawing.filter((x, index) => drawing.indexOf(x) !== index)
return result;
}

export function Sub_Value(array, end, index){
    return array.slice(0, end).map((x) => x[index])
}

export function Match_ArExact(x, y){
    return (x.every((a, b) => a === y[b]))
}

export function loop(a, b){
    return (1 - Math.pow((1 - a), b))
}

export function Q_Size(size, option1, option2){
    return (size == 3 ? option1 : size == 4 ? option2: undefined)
}

export function Get_Tr(prob_type){
    const prob_fa4 = [
        "NaN,0.49934639695515254,0.5074184247347964,0.4929071061089364,0.49754680084033925,0.49862205471153764,0.5037888679076319,0.4965793967226714,0.5065872200811669,0.47483181538997876,0.5029349457528876,0.4899586136778476,0.4667835842691251,0.5108294936013,0.5692366111351415,0.5897117706043549,0.47951897137049954,0.6482092905186803,0.1896146554962479,0.2144402620113222,0,0.45022713601194797,0.1896146554962479,0.6859120212362533,0,0.8675753457510592,0,1,NaN,NaN,NaN\n"
    ]
    const prob_fa3 = [
        "NaN,0.5029105316343159,0.48768713526477536,0.4986136380420407,0.5050797910576509,0.5046171661975288,0.5112232877567854,0.5037891596821332,0.4957792018399847,0.4895631861982679,0.5105721582099535,0.4716231056446299,0.517096463426553,0.4986454151753051,0.5129519770219848,0.5175003699866805,0.5553412462908012,0.46782236998337684,0.5826734090258564,0.5353260869565217,0.5393850042123,0.5353260869565217,0.6388325901905147,0.581549815498155,0.6459016393442624,0,0.8794642857142857,0,1,NaN,NaN\n"
    ]
    const col_prob4 = [
        "NaN,0.502829924348557,0.49833636763136424,0.5023893621441928,0.4871774638996291,0.47695852534562216,0.46881486606701595,0.5044138780537878,0.5158142664872141,0.5189067764882066,0.5017962350912487,0.4985549132947977,0.493438792018695,0.47774601878317685,0.5150487494701145,0.5108514190317195,0.5039030955585464,0.5229517722254503,0.53026400515132,0.5093703148425787,0.45955716222322635,0.5833333333333334,0.5272353545734841,0.5062836624775584,0.5083056478405316,0.47257053291536055,0.5483625285605485,0.4938505203405866,0.4812834224598931,0.5401929260450161,0.5538461538461538,0.4464,0.49514563106796117,0.4057377049180328,0.4126637554585153,0.5737704918032788,0.6047430830039526,0.36486486486486486,0.25925925925925924,0.3694029850746268,0.30901287553648066,0.48042704626334515,0.5586206896551724,0.625,0.4186046511627907,0.5510204081632653,0.5357142857142858,0.5963855421686747,0.6387096774193548,0.5192307692307693,0.5943396226415094,0.40298507462686567,0.18750000000000003,0.5070422535211268,0.5373134328358209,0.23076923076923078,0.6428571428571429,0,0.43902439024390244,0.5744680851063829,0,0.5,0.6428571428571429,0.8571428571428571,0,0,0,0,0,0.5294117647058824,0.75,0.8181818181818182,0,0,0,0.9,0,0,0,0,0,0,1,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN\n",
        "NaN,0.5177270519669743,0.5126441056154705,0.48195422535211274,0.4889206576125804,0.505488894562165,0.5123720930232558,0.5027986059773999,0.4973740749582239,0.5045293422607326,0.5062001771479185,0.48012078510317063,0.48760330578512395,0.48899212280347404,0.5123376623376623,0.48524923702950157,0.4879213483146067,0.47383177570093454,0.4663376806485724,0.4703588143525741,0.45598969514813226,0.4934725848563969,0.4669379450661241,0.5179202423018678,0.5023752969121141,0.44903777619387025,0.5436241610738255,0.5544703230653644,0.5747663551401869,0.48214285714285715,0.46494464944649444,0.5886075949367088,0.532394366197183,0.4302788844621514,0.4276859504132231,0.536101083032491,0.5159235668789809,0.5448430493273543,0.4542586750788643,0.5905511811023622,0.5124555160142349,0.5294117647058824,0.4433497536945813,0.48387096774193544,0.5183246073298429,0.4675324675324676,0.5892857142857143,0.6040268456375839,0.5384615384615384,0.6183206106870229,0,0.63,0.4736842105263158,0.45762711864406785,0,0.5192307692307693,0.4186046511627907,0.6101694915254238,0.3,0.703125,0,0,0.6428571428571429,0.5294117647058824,0,0.7659574468085106,0.7200000000000001,0,0,0.6428571428571428,0,0,0,0,0,0,0,0,0,NaN,0.9473684210526315,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN\n",
        "NaN,0.4970164377392479,0.48934945308002303,0.49205340114431023,0.49938262077481094,0.49859371004858094,0.5177099374943382,0.512233049968899,0.4977498815727143,0.4962316541055137,0.49905646683118016,0.4646271510516253,0.5020725388601037,0.5378227116808089,0.5199048031155344,0.4529540481400438,0.4629468177855275,0.5103227682465833,0.5094895287958116,0.4913316119513094,0.481733220050977,0.5153129161118508,0.5205882352941177,0.556841046277666,0.50065445026178,0.4814264487369985,0.5514223194748359,0.49504057709648336,0.5273775216138329,0.4775086505190311,0.48963730569948183,0.5871886120996442,0.5767690253671562,0.5606557377049181,0.4489311163895487,0.41463414634146345,0.44141689373296994,0.4958677685950413,0.5669291338582677,0.4856115107913669,0.5364238410596026,0.4778761061946903,0.5,0.5217391304347826,0.6566523605150214,0.3364485981308411,0.47014925373134325,0.36734693877551017,0.48214285714285715,0.3698630136986301,0.4787234042553191,0.4444444444444444,0,0.45569620253164556,0.6,0.6000000000000001,0,0.5094339622641509,0.5192307692307693,0.5744680851063829,0,0.48648648648648646,0,0.6206896551724137,0,0.6428571428571429,0.6,0.6428571428571428,0,0,0,0.75,0,0,0,0,0,0,0,0,0,0,0.75,0,0,0,0.8181818181818182,0,0,0,0,0,0,0,0,0,0,0,0,0.9,NaN\n",
        "NaN,0.5007892659826362,0.49845979757339537,0.5050359712230217,0.5018818649665873,0.4998272585938849,0.5207776651617064,0.485543369890329,0.5047807835820896,0.5028720626631854,0.4908112953832362,0.5032701111837803,0.4797040971168437,0.5069923182982076,0.5089872862779483,0.4970802919708029,0.5028203062046737,0.4891908585546633,0.4802929891873038,0.519594121763471,0.4808548530721282,0.4403669724770642,0.49190283400809715,0.519140010487677,0.4822466107165914,0.5451174289245982,0.5223214285714286,0.47500000000000003,0.5175202156334231,0.5103598691384951,0.5211581291759465,0.5433962264150943,0.48080133555926546,0.3407572383073496,0.4842300556586271,0.5048355899419729,0.44786729857819907,0.41463414634146345,0.43465909090909094,0.5386533665835411,0.5354107648725213,0.24324324324324326,0.6036585365853658,0.48749999999999993,0.5342465753424657,0.3576158940397351,0.4764705882352941,0.3130434782608696,0.41860465116279066,0.432,0.569620253164557,0.6382978723404256,0.6260869565217392,0.675,0.3529411764705882,0.3829787234042553,0.7058823529411765,0.5,0,0,0,0.37500000000000006,0.75,0.6428571428571429,0.6428571428571428,0.6428571428571428,0.6923076923076923,0.75,0,0.8181818181818182,0,0,0,0,0,0,0,0.9,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN\n"
    ]
    
    const col_prob3 = [
        "NaN,0.4992307069398332,0.5064900426742532,0.5004500450045005,0.5085582620144832,0.49631940112289463,0.4833239118145845,0.4996197718631179,0.5196270853778214,0.4837019790454017,0.5122850122850122,0.5244285073957867,0.4723892837616184,0.4927198602213162,0.49143780290791605,0.5164948453608247,0.46317991631799166,0.492772667542707,0.5002395783421179,0.51985559566787,0.4748603351955307,0.5323785803237858,0.49213483146067416,0.48403361344537815,0.41581108829568786,0.5371900826446281,0.48648648648648646,0.49009900990099003,0.4473684210526316,0.4278688524590164,0.5373134328358209,0.5174216027874564,0.5127701375245579,0.5789473684210527,0.5625,0.48648648648648646,0.5294117647058824,0.45703125000000006,0.5019920318725098,0.5316455696202531,0.49748743718592964,0.526595744680851,0.5325443786982248,0.5660377358490566,0.41284403669724773,0.525,0.4639175257731959,0.4285714285714286,0.5113636363636364,0.48000000000000004,0.19148936170212766,0.3333333333333333,0.5294117647058824,0.6749999999999999,0.4285714285714286,0.84375,0.391304347826087,0,0.4090909090909091,0.6206896551724138,0.4736842105263159,0,0.6923076923076923,0.5625,0.6,0,0.6428571428571428,0.6923076923076923,0.75,0,0,0,0,0,0,0,0.8181818181818182,0,0,0,0,0.8999999999999999,0,0,0,0,0,0,0,0,0,0,1,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN\n",
        "NaN,0.504907828585109,0.49233421028758056,0.48578491965389375,0.5045350234947,0.48968105065666045,0.515779743826753,0.4815106215578285,0.5092124571987608,0.5053743513713862,0.5191609519967728,0.5012658227848101,0.509607993850884,0.47743902439024394,0.48696799736060703,0.4811946902654867,0.5049961568024597,0.5112335735481135,0.5172413793103449,0.5283307810107198,0.5132052821128451,0.5154707044107966,0.447346251053075,0.5470719051148999,0.510989010989011,0.4846153846153846,0.48591549295774644,0.44179523141654975,0.5287206266318538,0.5340086830680173,0.5043782837127847,0.49897330595482536,0.5094339622641509,0.5,0.38999999999999996,0.5625,0.5,0.475609756097561,0.5738255033557047,0.45685279187817257,0.45762711864406785,0.4909090909090909,0.39416058394160586,0.4,0.3913043478260869,0.45378151260504196,0.5179856115107914,0.5,0.6827586206896552,0.33962264150943394,0.3214285714285714,0.5142857142857142,0.3673469387755102,0.3673469387755102,0.37500000000000006,0.7012987012987013,0.5510204081632654,0,0.4864864864864865,0.6428571428571429,0,0.5625,0,0.6206896551724138,0.5294117647058824,0.6666666666666666,0.5625,0,0.5625,0.6,0,0.8181818181818182,0.8571428571428572,0,0,0,0,0,0.8999999999999999,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN\n",
        "NaN,0.5080990948070511,0.48573825503355705,0.48571428571428577,0.5133262260127932,0.509985563041386,0.4943134535367545,0.5080213903743316,0.4953846153846154,0.49424419701830535,0.5046728971962617,0.5152203543843707,0.4889725658956428,0.4944767441860465,0.5035166240409208,0.5059357541899442,0.5115207373271891,0.5156049593843522,0.4760935910478128,0.5337802991232594,0.5380710659898477,0.4204275534441805,0.45560165975103734,0.48403361344537815,0.5167844522968198,0.4819773429454171,0.5137211855104281,0.5,0.503586800573888,0.48913043478260876,0.47368421052631576,0.4554655870445344,0.46956521739130436,0.5206611570247934,0.4173913043478261,0.542713567839196,0.38372093023255816,0.5921052631578948,0.5510204081632653,0.555984555984556,0.5217391304347826,0.5103092783505155,0.6457399103139014,0.5555555555555555,0.3068181818181818,0.49090909090909085,0.36,0.1607142857142857,0.6153846153846154,0.4736842105263159,0.5624999999999999,0.36000000000000004,0.5844155844155845,0.5714285714285715,0.5510204081632654,0.679245283018868,0.4090909090909091,0,0.4090909090909091,0.4285714285714286,0.5806451612903226,0,0.4285714285714286,0.5,0.5294117647058824,0.5,0,0,0.5294117647058824,0,0.5625,0,0.6,0,0,0,0.8181818181818182,0.75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.8571428571428572,NaN,0.8999999999999999,NaN,NaN,NaN,NaN,NaN,NaN\n"
    ]
    const probs = [prob_fa3, prob_fa4].map((x) => x.map((y) => y.split(',')))
    const prob_col = [col_prob3, col_prob4].map((x) => x.map((y) => y.split(',')))
    return (prob_type == 'reg' ? probs: prob_type == 'col'? prob_col : console.log('Invalid'))
}

export function Box_S(drawing_history, drawing_size, select){
    const inserts = Q_Size(drawing_size, [[0, 1, 2], [0, 2, 1], [1, 0, 2], [1, 2, 0], [2, 0, 1], [2, 1, 0]], [[0, 1, 2, 3],[0, 1, 3, 2],[0, 2,1,3],[0,2,3,1],[0,3,1,2],[0,3,2,1],[1,0,2,3],[1,0,3,2],[1,2,0,3],[1,2,3,0],[1,3,0,2],[1,3,2,0],[2,0,1,3],[2,0,3,1],[2,1,0,3],[2,1,3,0],[2,3,0,1],[2,3,1,0],[3,0,1,2],[3,0,2,1],[3,1,0,2],[3,1,2,0],[3,2,0,1],[3,2,1,0]])
    const result = drawing_history.filter((x) => inserts.map((y) => y.map((z) => select[z])).findIndex((a) => JSON.stringify(a) === JSON.stringify(x.slice(0, drawing_size))) > -1)
return result
}

export function Box_S2(drawing_history, pos_1, end_pos, select){
    const result = drawing_history.filter((x) => x.slice(pos_1, end_pos).sort((a, b) => a - b).join('') === select.sort((a, b) => a - b).join(''));
return result;
}

export function Box_BCode(drawing_history, boxcode_pos = 0, select){
    const result = drawing_history.filter((x) => x[boxcode_pos] === select.sort((a, b) => a - b).join(''));
return result;
}

export function Box_C(array){
    return array.toSorted((a, b) => a - b).join('')
}

export function Box_T(array, size){
    return Q_Size(size, [[0.01, 1], [0.27,  4 / 27], [0.72, 1 / 27]], [[0.001, 1], [0.036, 27 / 256], [0.027, 1 / 16], [0.432, 1 / 64], [0.5040, 1 / 256]]).find((z) => z.includes(array.map((y, id, arr) => RelFreq(y, arr)).reduce((a, b) => a * b)))[0]
}


export function CSV_Array(csv, remove = 1, remove_b = Infinity){
    const rows = csv.trim().split('\n');
    let result = [];
    for (const row of rows) {const values = row.split(',');
      result.push(values);
    }
    result = result.map((x) => x.slice(remove, Infinity)).slice(remove, Infinity)
    let res = result.map((x, i) => x.length === 0 ? i: false).filter((x) => x !== false)
    let result2 = []
    for(let i = 0; i <= res.length; i++){
        result2.push(result.slice((i === 0 ? 0 : (res[i - 1] + 1)), res[i]))

    }
    console.log(result2)
    return result2;
  }
  
 